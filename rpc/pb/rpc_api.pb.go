// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc_api.proto

package rpcpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContractAddressRequest struct {
	ContractAddress      string   `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractAddressRequest) Reset()         { *m = ContractAddressRequest{} }
func (m *ContractAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ContractAddressRequest) ProtoMessage()    {}
func (*ContractAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{0}
}

func (m *ContractAddressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContractAddressRequest.Unmarshal(m, b)
}
func (m *ContractAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContractAddressRequest.Marshal(b, m, deterministic)
}
func (m *ContractAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractAddressRequest.Merge(m, src)
}
func (m *ContractAddressRequest) XXX_Size() int {
	return xxx_messageInfo_ContractAddressRequest.Size(m)
}
func (m *ContractAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractAddressRequest proto.InternalMessageInfo

func (m *ContractAddressRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type TransactionReceipt struct {
	//hex tx hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	//hex block hash
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	//The height of the block where the tx is
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	//Hex string of the sender account addresss.
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	//Hex string of the receiver account addresss.
	To string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	//Amount of value sending with this transaction.
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	//transaction fee
	Fee string `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	//Transaction nonce.
	Nonce uint64 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	//tx tpye
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	//hex data
	Data string `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	//tx priority
	Priority uint32 `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
	//timestamp
	Timestamp int64 `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//id of the chain
	ChainId uint32 `protobuf:"varint,13,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	//signature of the from address
	Signature string `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature,omitempty"`
	//tx status {1:SUCCESS、0：FAILED}
	Status uint32 `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	//tx error_message
	ErrorMessage string `protobuf:"bytes,16,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	//The contract address created, if the transaction was a contract creation, otherwise null.
	ContractAddress      string   `protobuf:"bytes,17,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionReceipt) Reset()         { *m = TransactionReceipt{} }
func (m *TransactionReceipt) String() string { return proto.CompactTextString(m) }
func (*TransactionReceipt) ProtoMessage()    {}
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{1}
}

func (m *TransactionReceipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionReceipt.Unmarshal(m, b)
}
func (m *TransactionReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionReceipt.Marshal(b, m, deterministic)
}
func (m *TransactionReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionReceipt.Merge(m, src)
}
func (m *TransactionReceipt) XXX_Size() int {
	return xxx_messageInfo_TransactionReceipt.Size(m)
}
func (m *TransactionReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionReceipt proto.InternalMessageInfo

func (m *TransactionReceipt) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionReceipt) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TransactionReceipt) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TransactionReceipt) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionReceipt) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionReceipt) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionReceipt) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *TransactionReceipt) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionReceipt) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TransactionReceipt) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *TransactionReceipt) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TransactionReceipt) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionReceipt) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TransactionReceipt) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *TransactionReceipt) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TransactionReceipt) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *TransactionReceipt) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type GetPendingTransactionsByPageRequest struct {
	Page                 uint32   `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPendingTransactionsByPageRequest) Reset()         { *m = GetPendingTransactionsByPageRequest{} }
func (m *GetPendingTransactionsByPageRequest) String() string { return proto.CompactTextString(m) }
func (*GetPendingTransactionsByPageRequest) ProtoMessage()    {}
func (*GetPendingTransactionsByPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{2}
}

func (m *GetPendingTransactionsByPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPendingTransactionsByPageRequest.Unmarshal(m, b)
}
func (m *GetPendingTransactionsByPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPendingTransactionsByPageRequest.Marshal(b, m, deterministic)
}
func (m *GetPendingTransactionsByPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPendingTransactionsByPageRequest.Merge(m, src)
}
func (m *GetPendingTransactionsByPageRequest) XXX_Size() int {
	return xxx_messageInfo_GetPendingTransactionsByPageRequest.Size(m)
}
func (m *GetPendingTransactionsByPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPendingTransactionsByPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPendingTransactionsByPageRequest proto.InternalMessageInfo

func (m *GetPendingTransactionsByPageRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetPendingTransactionsByPageRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PendingTransaction struct {
	Txs                  []*Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PendingTransaction) Reset()         { *m = PendingTransaction{} }
func (m *PendingTransaction) String() string { return proto.CompactTextString(m) }
func (*PendingTransaction) ProtoMessage()    {}
func (*PendingTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{3}
}

func (m *PendingTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingTransaction.Unmarshal(m, b)
}
func (m *PendingTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingTransaction.Marshal(b, m, deterministic)
}
func (m *PendingTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTransaction.Merge(m, src)
}
func (m *PendingTransaction) XXX_Size() int {
	return xxx_messageInfo_PendingTransaction.Size(m)
}
func (m *PendingTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTransaction proto.InternalMessageInfo

func (m *PendingTransaction) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Transaction struct {
	//hex tx hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	//Hex string of the sender account addresss.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	//Hex string of the receiver account addresss.
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	//Amount of value sending with this transaction.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	//transaction fee
	Fee string `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
	//Transaction nonce.
	Nonce uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	//tx tpye
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	//hex data
	Data string `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	//tx priority
	Priority uint32 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	//timestamp
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//id of the chain
	ChainId uint32 `protobuf:"varint,11,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	//hex string of public key
	PubKey string `protobuf:"bytes,12,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	//signature of the from address
	Signature            string   `protobuf:"bytes,13,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{4}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Transaction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Transaction) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Transaction) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *Transaction) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type PendingTransactionsSize struct {
	Size                 uint64   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PendingTransactionsSize) Reset()         { *m = PendingTransactionsSize{} }
func (m *PendingTransactionsSize) String() string { return proto.CompactTextString(m) }
func (*PendingTransactionsSize) ProtoMessage()    {}
func (*PendingTransactionsSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{5}
}

func (m *PendingTransactionsSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PendingTransactionsSize.Unmarshal(m, b)
}
func (m *PendingTransactionsSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PendingTransactionsSize.Marshal(b, m, deterministic)
}
func (m *PendingTransactionsSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTransactionsSize.Merge(m, src)
}
func (m *PendingTransactionsSize) XXX_Size() int {
	return xxx_messageInfo_PendingTransactionsSize.Size(m)
}
func (m *PendingTransactionsSize) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTransactionsSize.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTransactionsSize proto.InternalMessageInfo

func (m *PendingTransactionsSize) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type BlockHashAndFull struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	FullFillTransaction  bool     `protobuf:"varint,2,opt,name=full_fill_transaction,json=fullFillTransaction,proto3" json:"full_fill_transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHashAndFull) Reset()         { *m = BlockHashAndFull{} }
func (m *BlockHashAndFull) String() string { return proto.CompactTextString(m) }
func (*BlockHashAndFull) ProtoMessage()    {}
func (*BlockHashAndFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{6}
}

func (m *BlockHashAndFull) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHashAndFull.Unmarshal(m, b)
}
func (m *BlockHashAndFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHashAndFull.Marshal(b, m, deterministic)
}
func (m *BlockHashAndFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHashAndFull.Merge(m, src)
}
func (m *BlockHashAndFull) XXX_Size() int {
	return xxx_messageInfo_BlockHashAndFull.Size(m)
}
func (m *BlockHashAndFull) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHashAndFull.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHashAndFull proto.InternalMessageInfo

func (m *BlockHashAndFull) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockHashAndFull) GetFullFillTransaction() bool {
	if m != nil {
		return m.FullFillTransaction
	}
	return false
}

type BlockHeightAndFull struct {
	Height               uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	FullFillTransaction  bool     `protobuf:"varint,2,opt,name=full_fill_transaction,json=fullFillTransaction,proto3" json:"full_fill_transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeightAndFull) Reset()         { *m = BlockHeightAndFull{} }
func (m *BlockHeightAndFull) String() string { return proto.CompactTextString(m) }
func (*BlockHeightAndFull) ProtoMessage()    {}
func (*BlockHeightAndFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{7}
}

func (m *BlockHeightAndFull) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeightAndFull.Unmarshal(m, b)
}
func (m *BlockHeightAndFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeightAndFull.Marshal(b, m, deterministic)
}
func (m *BlockHeightAndFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightAndFull.Merge(m, src)
}
func (m *BlockHeightAndFull) XXX_Size() int {
	return xxx_messageInfo_BlockHeightAndFull.Size(m)
}
func (m *BlockHeightAndFull) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightAndFull.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightAndFull proto.InternalMessageInfo

func (m *BlockHeightAndFull) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeightAndFull) GetFullFillTransaction() bool {
	if m != nil {
		return m.FullFillTransaction
	}
	return false
}

type BlockHash struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHash) Reset()         { *m = BlockHash{} }
func (m *BlockHash) String() string { return proto.CompactTextString(m) }
func (*BlockHash) ProtoMessage()    {}
func (*BlockHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{8}
}

func (m *BlockHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHash.Unmarshal(m, b)
}
func (m *BlockHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHash.Marshal(b, m, deterministic)
}
func (m *BlockHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHash.Merge(m, src)
}
func (m *BlockHash) XXX_Size() int {
	return xxx_messageInfo_BlockHash.Size(m)
}
func (m *BlockHash) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHash.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHash proto.InternalMessageInfo

func (m *BlockHash) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type BlockHeight struct {
	Height               uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeight) Reset()         { *m = BlockHeight{} }
func (m *BlockHeight) String() string { return proto.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()    {}
func (*BlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{9}
}

func (m *BlockHeight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeight.Unmarshal(m, b)
}
func (m *BlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeight.Marshal(b, m, deterministic)
}
func (m *BlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeight.Merge(m, src)
}
func (m *BlockHeight) XXX_Size() int {
	return xxx_messageInfo_BlockHeight.Size(m)
}
func (m *BlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeight proto.InternalMessageInfo

func (m *BlockHeight) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BlockListResponse struct {
	Blocks               []*BlockResponse `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BlockListResponse) Reset()         { *m = BlockListResponse{} }
func (m *BlockListResponse) String() string { return proto.CompactTextString(m) }
func (*BlockListResponse) ProtoMessage()    {}
func (*BlockListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{10}
}

func (m *BlockListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockListResponse.Unmarshal(m, b)
}
func (m *BlockListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockListResponse.Marshal(b, m, deterministic)
}
func (m *BlockListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockListResponse.Merge(m, src)
}
func (m *BlockListResponse) XXX_Size() int {
	return xxx_messageInfo_BlockListResponse.Size(m)
}
func (m *BlockListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockListResponse proto.InternalMessageInfo

func (m *BlockListResponse) GetBlocks() []*BlockResponse {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockResponse struct {
	ChainId              uint32         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Hash                 string         `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	BestBlock            bool           `protobuf:"varint,3,opt,name=best_block,json=bestBlock,proto3" json:"best_block,omitempty"`
	WitnessReward        string         `protobuf:"bytes,4,opt,name=witness_reward,json=witnessReward,proto3" json:"witness_reward,omitempty"`
	Coinbase             string         `protobuf:"bytes,5,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	StateRoot            string         `protobuf:"bytes,6,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	TxsRoot              string         `protobuf:"bytes,7,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	ParentHash           string         `protobuf:"bytes,8,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Height               uint64         `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp            int64          `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Extra                string         `protobuf:"bytes,11,opt,name=extra,proto3" json:"extra,omitempty"`
	Txs                  []*Transaction `protobuf:"bytes,12,rep,name=txs,proto3" json:"txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BlockResponse) Reset()         { *m = BlockResponse{} }
func (m *BlockResponse) String() string { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()    {}
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{11}
}

func (m *BlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockResponse.Unmarshal(m, b)
}
func (m *BlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockResponse.Marshal(b, m, deterministic)
}
func (m *BlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponse.Merge(m, src)
}
func (m *BlockResponse) XXX_Size() int {
	return xxx_messageInfo_BlockResponse.Size(m)
}
func (m *BlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponse proto.InternalMessageInfo

func (m *BlockResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockResponse) GetBestBlock() bool {
	if m != nil {
		return m.BestBlock
	}
	return false
}

func (m *BlockResponse) GetWitnessReward() string {
	if m != nil {
		return m.WitnessReward
	}
	return ""
}

func (m *BlockResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *BlockResponse) GetStateRoot() string {
	if m != nil {
		return m.StateRoot
	}
	return ""
}

func (m *BlockResponse) GetTxsRoot() string {
	if m != nil {
		return m.TxsRoot
	}
	return ""
}

func (m *BlockResponse) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *BlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockResponse) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *BlockResponse) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type AccountInfo struct {
	Address              string        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balance              string        `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	FrozenFund           string        `protobuf:"bytes,3,opt,name=frozen_fund,json=frozenFund,proto3" json:"frozen_fund,omitempty"`
	PledgeFund           string        `protobuf:"bytes,4,opt,name=pledge_fund,json=pledgeFund,proto3" json:"pledge_fund,omitempty"`
	Nonce                uint64        `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	VariablesHash        string        `protobuf:"bytes,6,opt,name=variables_hash,json=variablesHash,proto3" json:"variables_hash,omitempty"`
	CreditIndex          string        `protobuf:"bytes,7,opt,name=credit_index,json=creditIndex,proto3" json:"credit_index,omitempty"`
	Permissions          []*Permission `protobuf:"bytes,8,rep,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{12}
}

func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountInfo.Unmarshal(m, b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return xxx_messageInfo_AccountInfo.Size(m)
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func (m *AccountInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountInfo) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *AccountInfo) GetFrozenFund() string {
	if m != nil {
		return m.FrozenFund
	}
	return ""
}

func (m *AccountInfo) GetPledgeFund() string {
	if m != nil {
		return m.PledgeFund
	}
	return ""
}

func (m *AccountInfo) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AccountInfo) GetVariablesHash() string {
	if m != nil {
		return m.VariablesHash
	}
	return ""
}

func (m *AccountInfo) GetCreditIndex() string {
	if m != nil {
		return m.CreditIndex
	}
	return ""
}

func (m *AccountInfo) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type Permission struct {
	AuthCategory         string   `protobuf:"bytes,1,opt,name=auth_category,json=authCategory,proto3" json:"auth_category,omitempty"`
	AuthMessage          []string `protobuf:"bytes,2,rep,name=auth_message,json=authMessage,proto3" json:"auth_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permission) Reset()         { *m = Permission{} }
func (m *Permission) String() string { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()    {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{13}
}

func (m *Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission.Unmarshal(m, b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return xxx_messageInfo_Permission.Size(m)
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetAuthCategory() string {
	if m != nil {
		return m.AuthCategory
	}
	return ""
}

func (m *Permission) GetAuthMessage() []string {
	if m != nil {
		return m.AuthMessage
	}
	return nil
}

type CreditIndexResponse struct {
	CreditIndex          string   `protobuf:"bytes,1,opt,name=credit_index,json=creditIndex,proto3" json:"credit_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreditIndexResponse) Reset()         { *m = CreditIndexResponse{} }
func (m *CreditIndexResponse) String() string { return proto.CompactTextString(m) }
func (*CreditIndexResponse) ProtoMessage()    {}
func (*CreditIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{14}
}

func (m *CreditIndexResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditIndexResponse.Unmarshal(m, b)
}
func (m *CreditIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditIndexResponse.Marshal(b, m, deterministic)
}
func (m *CreditIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditIndexResponse.Merge(m, src)
}
func (m *CreditIndexResponse) XXX_Size() int {
	return xxx_messageInfo_CreditIndexResponse.Size(m)
}
func (m *CreditIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreditIndexResponse proto.InternalMessageInfo

func (m *CreditIndexResponse) GetCreditIndex() string {
	if m != nil {
		return m.CreditIndex
	}
	return ""
}

type BlockChainInfo struct {
	//The id of the chain in which the node is located
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	//tail block height
	TailHeight uint64 `protobuf:"varint,2,opt,name=tail_height,json=tailHeight,proto3" json:"tail_height,omitempty"`
	//confirm block height
	ConfirmHeight uint64 `protobuf:"varint,3,opt,name=confirm_height,json=confirmHeight,proto3" json:"confirm_height,omitempty"`
	//best block hash
	BestBlockHash string `protobuf:"bytes,4,opt,name=best_block_hash,json=bestBlockHash,proto3" json:"best_block_hash,omitempty"`
	//pending transaction size
	PendingTxSize        uint64   `protobuf:"varint,5,opt,name=pending_tx_size,json=pendingTxSize,proto3" json:"pending_tx_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockChainInfo) Reset()         { *m = BlockChainInfo{} }
func (m *BlockChainInfo) String() string { return proto.CompactTextString(m) }
func (*BlockChainInfo) ProtoMessage()    {}
func (*BlockChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{15}
}

func (m *BlockChainInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockChainInfo.Unmarshal(m, b)
}
func (m *BlockChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockChainInfo.Marshal(b, m, deterministic)
}
func (m *BlockChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockChainInfo.Merge(m, src)
}
func (m *BlockChainInfo) XXX_Size() int {
	return xxx_messageInfo_BlockChainInfo.Size(m)
}
func (m *BlockChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockChainInfo proto.InternalMessageInfo

func (m *BlockChainInfo) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockChainInfo) GetTailHeight() uint64 {
	if m != nil {
		return m.TailHeight
	}
	return 0
}

func (m *BlockChainInfo) GetConfirmHeight() uint64 {
	if m != nil {
		return m.ConfirmHeight
	}
	return 0
}

func (m *BlockChainInfo) GetBestBlockHash() string {
	if m != nil {
		return m.BestBlockHash
	}
	return ""
}

func (m *BlockChainInfo) GetPendingTxSize() uint64 {
	if m != nil {
		return m.PendingTxSize
	}
	return 0
}

type NodeInfoResponse struct {
	//the id of the current node
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//coinbase address
	Coinbase string `protobuf:"bytes,2,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	//tail block height
	TailHeight uint64 `protobuf:"varint,3,opt,name=tail_height,json=tailHeight,proto3" json:"tail_height,omitempty"`
	//confirm block height
	ConfirmHeight uint64 `protobuf:"varint,4,opt,name=confirm_height,json=confirmHeight,proto3" json:"confirm_height,omitempty"`
	//The id of the chain in which the node is located
	ChainId uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// the node synchronized status.
	Synchronized bool `protobuf:"varint,6,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
	// the node route table bucket size.
	BucketSize int32 `protobuf:"varint,7,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`
	//net version info
	NetVersion *NetVersion `protobuf:"bytes,8,opt,name=net_version,json=netVersion,proto3" json:"net_version,omitempty"`
	//active count
	ActiveCount uint32 `protobuf:"varint,9,opt,name=active_count,json=activeCount,proto3" json:"active_count,omitempty"`
	//The peers to which this node is connected
	PeerIds              []string `protobuf:"bytes,10,rep,name=peer_ids,json=peerIds,proto3" json:"peer_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfoResponse) Reset()         { *m = NodeInfoResponse{} }
func (m *NodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NodeInfoResponse) ProtoMessage()    {}
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{16}
}

func (m *NodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfoResponse.Unmarshal(m, b)
}
func (m *NodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfoResponse.Marshal(b, m, deterministic)
}
func (m *NodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoResponse.Merge(m, src)
}
func (m *NodeInfoResponse) XXX_Size() int {
	return xxx_messageInfo_NodeInfoResponse.Size(m)
}
func (m *NodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoResponse proto.InternalMessageInfo

func (m *NodeInfoResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfoResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *NodeInfoResponse) GetTailHeight() uint64 {
	if m != nil {
		return m.TailHeight
	}
	return 0
}

func (m *NodeInfoResponse) GetConfirmHeight() uint64 {
	if m != nil {
		return m.ConfirmHeight
	}
	return 0
}

func (m *NodeInfoResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *NodeInfoResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

func (m *NodeInfoResponse) GetBucketSize() int32 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *NodeInfoResponse) GetNetVersion() *NetVersion {
	if m != nil {
		return m.NetVersion
	}
	return nil
}

func (m *NodeInfoResponse) GetActiveCount() uint32 {
	if m != nil {
		return m.ActiveCount
	}
	return 0
}

func (m *NodeInfoResponse) GetPeerIds() []string {
	if m != nil {
		return m.PeerIds
	}
	return nil
}

type NetVersion struct {
	NetworkId            uint32   `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	ClientVersion        string   `protobuf:"bytes,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ProtocolVersion      string   `protobuf:"bytes,3,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Listen               []string `protobuf:"bytes,4,rep,name=listen,proto3" json:"listen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetVersion) Reset()         { *m = NetVersion{} }
func (m *NetVersion) String() string { return proto.CompactTextString(m) }
func (*NetVersion) ProtoMessage()    {}
func (*NetVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{17}
}

func (m *NetVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetVersion.Unmarshal(m, b)
}
func (m *NetVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetVersion.Marshal(b, m, deterministic)
}
func (m *NetVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetVersion.Merge(m, src)
}
func (m *NetVersion) XXX_Size() int {
	return xxx_messageInfo_NetVersion.Size(m)
}
func (m *NetVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_NetVersion.DiscardUnknown(m)
}

var xxx_messageInfo_NetVersion proto.InternalMessageInfo

func (m *NetVersion) GetNetworkId() uint32 {
	if m != nil {
		return m.NetworkId
	}
	return 0
}

func (m *NetVersion) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *NetVersion) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *NetVersion) GetListen() []string {
	if m != nil {
		return m.Listen
	}
	return nil
}

type ActiveCountResponse struct {
	ActiveCount          uint32   `protobuf:"varint,1,opt,name=active_count,json=activeCount,proto3" json:"active_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveCountResponse) Reset()         { *m = ActiveCountResponse{} }
func (m *ActiveCountResponse) String() string { return proto.CompactTextString(m) }
func (*ActiveCountResponse) ProtoMessage()    {}
func (*ActiveCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60065d63359679fe, []int{18}
}

func (m *ActiveCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActiveCountResponse.Unmarshal(m, b)
}
func (m *ActiveCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActiveCountResponse.Marshal(b, m, deterministic)
}
func (m *ActiveCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveCountResponse.Merge(m, src)
}
func (m *ActiveCountResponse) XXX_Size() int {
	return xxx_messageInfo_ActiveCountResponse.Size(m)
}
func (m *ActiveCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveCountResponse proto.InternalMessageInfo

func (m *ActiveCountResponse) GetActiveCount() uint32 {
	if m != nil {
		return m.ActiveCount
	}
	return 0
}

func init() {
	proto.RegisterType((*ContractAddressRequest)(nil), "rpcpb.ContractAddressRequest")
	proto.RegisterType((*TransactionReceipt)(nil), "rpcpb.TransactionReceipt")
	proto.RegisterType((*GetPendingTransactionsByPageRequest)(nil), "rpcpb.GetPendingTransactionsByPageRequest")
	proto.RegisterType((*PendingTransaction)(nil), "rpcpb.PendingTransaction")
	proto.RegisterType((*Transaction)(nil), "rpcpb.Transaction")
	proto.RegisterType((*PendingTransactionsSize)(nil), "rpcpb.PendingTransactionsSize")
	proto.RegisterType((*BlockHashAndFull)(nil), "rpcpb.BlockHashAndFull")
	proto.RegisterType((*BlockHeightAndFull)(nil), "rpcpb.BlockHeightAndFull")
	proto.RegisterType((*BlockHash)(nil), "rpcpb.BlockHash")
	proto.RegisterType((*BlockHeight)(nil), "rpcpb.BlockHeight")
	proto.RegisterType((*BlockListResponse)(nil), "rpcpb.BlockListResponse")
	proto.RegisterType((*BlockResponse)(nil), "rpcpb.BlockResponse")
	proto.RegisterType((*AccountInfo)(nil), "rpcpb.AccountInfo")
	proto.RegisterType((*Permission)(nil), "rpcpb.Permission")
	proto.RegisterType((*CreditIndexResponse)(nil), "rpcpb.CreditIndexResponse")
	proto.RegisterType((*BlockChainInfo)(nil), "rpcpb.BlockChainInfo")
	proto.RegisterType((*NodeInfoResponse)(nil), "rpcpb.NodeInfoResponse")
	proto.RegisterType((*NetVersion)(nil), "rpcpb.NetVersion")
	proto.RegisterType((*ActiveCountResponse)(nil), "rpcpb.ActiveCountResponse")
}

func init() { proto.RegisterFile("rpc_api.proto", fileDescriptor_60065d63359679fe) }

var fileDescriptor_60065d63359679fe = []byte{
	// 1746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x6e, 0x1b, 0xc9,
	0x11, 0x06, 0x7f, 0x24, 0x91, 0x45, 0x91, 0xa2, 0xdb, 0xb2, 0x34, 0xcb, 0x95, 0x57, 0xda, 0x5e,
	0xff, 0xc8, 0xc6, 0xae, 0x85, 0x68, 0x2f, 0xc1, 0xde, 0x24, 0x01, 0xd6, 0x0a, 0xc9, 0x6e, 0x94,
	0xb1, 0xb1, 0x01, 0x82, 0x24, 0x93, 0xe1, 0x4c, 0x93, 0x6a, 0x78, 0xd8, 0x3d, 0x99, 0x69, 0xca,
	0xa4, 0x6f, 0xc9, 0x0b, 0xe4, 0x10, 0x24, 0xc8, 0x0b, 0xe4, 0x19, 0xf2, 0x00, 0x79, 0x80, 0x1c,
	0x72, 0xc9, 0x03, 0xe4, 0x9a, 0x77, 0x08, 0xba, 0xba, 0xe7, 0x8f, 0x7f, 0x30, 0x72, 0x9b, 0xae,
	0xea, 0xfe, 0xea, 0xa7, 0xbf, 0xaa, 0x6a, 0x12, 0xba, 0x49, 0x1c, 0x78, 0x7e, 0xcc, 0x5f, 0xc5,
	0x89, 0x54, 0x92, 0x6c, 0x25, 0x71, 0x10, 0x0f, 0x07, 0xed, 0x24, 0x0e, 0x8c, 0x64, 0x70, 0x34,
	0x96, 0x72, 0x1c, 0xb1, 0x33, 0x3f, 0xe6, 0x67, 0xbe, 0x10, 0x52, 0xf9, 0x8a, 0x4b, 0x91, 0x1a,
	0x2d, 0xbd, 0x82, 0x83, 0x2b, 0x29, 0x54, 0xe2, 0x07, 0xea, 0x22, 0x0c, 0x13, 0x96, 0xa6, 0x2e,
	0xfb, 0xdd, 0x94, 0xa5, 0x8a, 0xbc, 0x80, 0x7e, 0x60, 0x35, 0x9e, 0x6f, 0x54, 0x4e, 0xed, 0xa4,
	0x76, 0xda, 0x76, 0xf7, 0x82, 0xea, 0x09, 0xfa, 0xcf, 0x06, 0x90, 0xb7, 0x89, 0x2f, 0x52, 0x3f,
	0xd0, 0xd8, 0x2e, 0x0b, 0x18, 0x8f, 0x15, 0x21, 0xd0, 0xbc, 0xf3, 0xd3, 0x3b, 0x7b, 0x0a, 0xbf,
	0xc9, 0x63, 0x80, 0x61, 0x24, 0x83, 0x77, 0x1e, 0x6a, 0xea, 0xa8, 0x69, 0xa3, 0xe4, 0x5b, 0xad,
	0xfe, 0x1c, 0x76, 0xad, 0x9a, 0xf1, 0xf1, 0x9d, 0x72, 0x1a, 0x27, 0xb5, 0xd3, 0xa6, 0xdb, 0x31,
	0x1b, 0x50, 0xa4, 0x51, 0x47, 0x89, 0x9c, 0x38, 0x4d, 0x83, 0xaa, 0xbf, 0x49, 0x0f, 0xea, 0x4a,
	0x3a, 0x5b, 0x28, 0xa9, 0x2b, 0x49, 0xf6, 0x61, 0xeb, 0xde, 0x8f, 0xa6, 0xcc, 0xd9, 0x46, 0x91,
	0x59, 0x90, 0x3e, 0x34, 0x46, 0x8c, 0x39, 0x3b, 0x28, 0xd3, 0x9f, 0x7a, 0x9f, 0x90, 0x22, 0x60,
	0x4e, 0x0b, 0xed, 0x98, 0x85, 0xb6, 0xa0, 0xe6, 0x31, 0x73, 0xda, 0xc6, 0x82, 0xfe, 0xd6, 0xb2,
	0xd0, 0x57, 0xbe, 0x03, 0x46, 0xa6, 0xbf, 0xc9, 0x00, 0x5a, 0x71, 0xc2, 0x65, 0xc2, 0xd5, 0xdc,
	0xe9, 0x9c, 0xd4, 0x4e, 0xbb, 0x6e, 0xbe, 0x26, 0x47, 0xd0, 0x56, 0x7c, 0xc2, 0x52, 0xe5, 0x4f,
	0x62, 0x67, 0xf7, 0xa4, 0x76, 0xda, 0x70, 0x0b, 0x01, 0xf9, 0x04, 0x5a, 0xc1, 0x9d, 0xcf, 0x85,
	0xc7, 0x43, 0xa7, 0x8b, 0x27, 0x77, 0x70, 0x7d, 0x13, 0xea, 0x83, 0x29, 0x1f, 0x0b, 0x5f, 0x4d,
	0x13, 0xe6, 0xf4, 0x4c, 0x7e, 0x72, 0x01, 0x39, 0x80, 0xed, 0x54, 0xf9, 0x6a, 0x9a, 0x3a, 0x7b,
	0x78, 0xcc, 0xae, 0xc8, 0x17, 0xd0, 0x65, 0x49, 0x22, 0x13, 0x6f, 0xc2, 0xd2, 0xd4, 0x1f, 0x33,
	0xa7, 0x8f, 0x27, 0x77, 0x51, 0xf8, 0x9d, 0x91, 0xad, 0xbc, 0xd1, 0x07, 0xab, 0x6f, 0xf4, 0x67,
	0xf0, 0xc5, 0x35, 0x53, 0xb7, 0x4c, 0x84, 0x5c, 0x8c, 0x4b, 0x57, 0x9b, 0x5e, 0xce, 0x6f, 0xfd,
	0x31, 0xcb, 0x38, 0x42, 0xa0, 0x19, 0x6b, 0x6b, 0x35, 0x74, 0x06, 0xbf, 0x75, 0x4e, 0x23, 0x3e,
	0xe1, 0x0a, 0x2f, 0xb7, 0xeb, 0x9a, 0x05, 0xfd, 0x06, 0xc8, 0x32, 0x1a, 0x79, 0x02, 0x0d, 0x35,
	0xd3, 0xb4, 0x6a, 0x9c, 0x76, 0xce, 0xc9, 0x2b, 0xe4, 0xee, 0xab, 0x32, 0x93, 0xb4, 0x9a, 0xfe,
	0xbd, 0x0e, 0x9d, 0xf2, 0xa9, 0x55, 0xbc, 0xca, 0x58, 0x51, 0x5f, 0x62, 0x45, 0x63, 0x99, 0x15,
	0xcd, 0x15, 0xac, 0xd8, 0x5a, 0xc1, 0x8a, 0xed, 0x55, 0xac, 0xd8, 0x59, 0xc1, 0x8a, 0xd6, 0x1a,
	0x56, 0xb4, 0x37, 0xb1, 0x02, 0x36, 0xb1, 0xa2, 0x53, 0x65, 0xc5, 0x21, 0xec, 0xc4, 0xd3, 0xa1,
	0xf7, 0x8e, 0xcd, 0x91, 0x4c, 0x6d, 0x77, 0x3b, 0x9e, 0x0e, 0x7f, 0xc2, 0xe6, 0x55, 0xba, 0x74,
	0x17, 0xe8, 0x42, 0xbf, 0x82, 0xc3, 0x15, 0x77, 0xf8, 0x86, 0x7f, 0x40, 0xd7, 0x53, 0xfe, 0xc1,
	0x5c, 0x5d, 0xd3, 0xc5, 0x6f, 0xfa, 0x4b, 0xe8, 0x5f, 0x66, 0xa5, 0x78, 0x21, 0xc2, 0xd7, 0xd3,
	0x28, 0x5a, 0x99, 0xec, 0x73, 0x78, 0x34, 0x9a, 0x46, 0x91, 0x37, 0xe2, 0x51, 0xe4, 0xa9, 0x02,
	0x19, 0xb3, 0xdf, 0x72, 0x1f, 0x6a, 0xe5, 0x6b, 0x1e, 0x45, 0x25, 0xa3, 0xf4, 0xb7, 0x40, 0x2e,
	0x8b, 0x2a, 0xce, 0xd0, 0x0f, 0x60, 0xdb, 0x56, 0xba, 0xf1, 0xc3, 0xae, 0xfe, 0x2f, 0x0b, 0xc7,
	0xd0, 0xce, 0xbd, 0x5f, 0xe5, 0x36, 0x7d, 0x0a, 0x9d, 0x92, 0x0b, 0xeb, 0x6c, 0xd3, 0x0b, 0x78,
	0x80, 0xdb, 0x7e, 0xca, 0x53, 0xe5, 0xb2, 0x34, 0x96, 0x22, 0x65, 0xe4, 0x4b, 0xd8, 0xc6, 0x26,
	0x94, 0x91, 0x75, 0xdf, 0x92, 0x15, 0x77, 0x66, 0xbb, 0x5c, 0xbb, 0x87, 0xfe, 0xb7, 0x0e, 0xdd,
	0x8a, 0xa6, 0x72, 0xb7, 0xb5, 0xea, 0xdd, 0x66, 0xae, 0xd6, 0x17, 0xda, 0x24, 0x4b, 0x95, 0x87,
	0x78, 0x48, 0xe1, 0x96, 0xdb, 0xd6, 0x12, 0x44, 0x25, 0x4f, 0xa1, 0xf7, 0x9e, 0x2b, 0xc1, 0xd2,
	0xd4, 0x4b, 0xd8, 0x7b, 0x3f, 0x09, 0x2d, 0xa5, 0xbb, 0x56, 0xea, 0xa2, 0x50, 0x53, 0x31, 0x90,
	0x5c, 0x0c, 0xfd, 0x34, 0xe3, 0x77, 0xbe, 0xd6, 0x16, 0x74, 0xef, 0x60, 0x5e, 0x22, 0xa5, 0xb2,
	0x7d, 0xb2, 0x8d, 0x12, 0x57, 0x4a, 0xa5, 0xfd, 0x55, 0xb3, 0xd4, 0x28, 0x0d, 0xe3, 0x77, 0xd4,
	0x2c, 0x45, 0xd5, 0x31, 0x74, 0x62, 0x3f, 0x61, 0x42, 0x99, 0x1e, 0x6e, 0xb8, 0x0f, 0x46, 0x84,
	0xb9, 0x2f, 0x12, 0xdb, 0xae, 0x5c, 0xea, 0x66, 0xf6, 0xef, 0xc3, 0x16, 0x9b, 0xa9, 0xc4, 0x47,
	0xea, 0xb7, 0x5d, 0xb3, 0xc8, 0x3a, 0xc4, 0xee, 0xe6, 0x0e, 0xf1, 0xd7, 0x3a, 0x74, 0x2e, 0x82,
	0x40, 0x4e, 0x85, 0xba, 0x11, 0x23, 0x49, 0x1c, 0xd8, 0xa9, 0x8e, 0xac, 0x6c, 0xa9, 0x35, 0x43,
	0x3f, 0xf2, 0x75, 0x75, 0x9b, 0x7c, 0x67, 0x4b, 0x1d, 0xd6, 0x28, 0x91, 0x1f, 0x98, 0xf0, 0x46,
	0x53, 0x11, 0xda, 0xb6, 0x01, 0x46, 0xf4, 0x7a, 0x2a, 0x42, 0x8c, 0x3b, 0x62, 0xe1, 0x98, 0x99,
	0x0d, 0x4d, 0x1b, 0x37, 0x8a, 0x70, 0x43, 0xde, 0x37, 0xb6, 0xca, 0x7d, 0xe3, 0x29, 0xf4, 0xee,
	0xfd, 0x84, 0xfb, 0xc3, 0x88, 0xa5, 0x26, 0x63, 0x26, 0xd9, 0xdd, 0x5c, 0x9a, 0x4d, 0xbe, 0x20,
	0x61, 0x21, 0x57, 0x1e, 0x17, 0x21, 0x9b, 0xd9, 0xa4, 0x77, 0x8c, 0xec, 0x46, 0x8b, 0xc8, 0xd7,
	0xd0, 0x89, 0x59, 0x32, 0xe1, 0x69, 0xaa, 0xab, 0xd8, 0x69, 0x61, 0x4e, 0x1e, 0xd8, 0x9c, 0xdc,
	0xe6, 0x1a, 0xb7, 0xbc, 0x8b, 0xbe, 0x05, 0x28, 0x54, 0x7a, 0x4e, 0xf8, 0x53, 0x75, 0xe7, 0x05,
	0xbe, 0x62, 0x63, 0x99, 0xcc, 0x6d, 0x7a, 0x76, 0xb5, 0xf0, 0xca, 0xca, 0xb4, 0x2b, 0xb8, 0x29,
	0x9b, 0x25, 0xf5, 0x93, 0x86, 0x76, 0x45, 0xcb, 0xec, 0x28, 0xa1, 0x3f, 0x86, 0x87, 0x57, 0x85,
	0x67, 0x39, 0xcb, 0x17, 0x83, 0xa8, 0x2d, 0x05, 0x41, 0xff, 0x51, 0x83, 0x1e, 0x92, 0xf8, 0x0a,
	0xe9, 0xaf, 0x6f, 0x6b, 0x43, 0x6d, 0x1c, 0x43, 0x47, 0xf9, 0x3c, 0xca, 0x9e, 0x03, 0x75, 0x4c,
	0x2c, 0x68, 0x91, 0x2d, 0xe2, 0xa7, 0xd0, 0x0b, 0xa4, 0x18, 0xf1, 0x64, 0x52, 0x7d, 0x32, 0x74,
	0xad, 0xd4, 0x6e, 0x7b, 0x06, 0x7b, 0x45, 0x3d, 0x99, 0x5b, 0xb0, 0x15, 0x93, 0x17, 0x15, 0xde,
	0xc2, 0x33, 0xd8, 0x8b, 0x4d, 0xc3, 0xf4, 0xd4, 0xcc, 0xc3, 0x06, 0x69, 0x2e, 0xb3, 0x6b, 0xc5,
	0x6f, 0x67, 0xba, 0x7b, 0xd2, 0x7f, 0xd7, 0xa1, 0xff, 0xbd, 0x0c, 0x99, 0xf6, 0x3f, 0x8f, 0xbe,
	0x07, 0x75, 0x1b, 0x41, 0xdb, 0xad, 0xf3, 0x6a, 0xf9, 0xd5, 0x17, 0xca, 0x6f, 0x21, 0xb0, 0xc6,
	0x47, 0x04, 0xd6, 0x5c, 0x15, 0x58, 0x39, 0x77, 0x5b, 0xd5, 0xdc, 0x51, 0xd8, 0x4d, 0xe7, 0x22,
	0xb8, 0x4b, 0xa4, 0xe0, 0x1f, 0x58, 0x88, 0xb4, 0x6b, 0xb9, 0x15, 0x99, 0x76, 0x63, 0x38, 0x0d,
	0xde, 0x31, 0x65, 0x62, 0xd5, 0xa4, 0xdb, 0x72, 0xc1, 0x88, 0x70, 0x4c, 0x9c, 0x43, 0x47, 0x30,
	0xe5, 0xdd, 0xb3, 0x44, 0xf3, 0x07, 0x8b, 0xbd, 0xe0, 0xdc, 0xf7, 0x4c, 0xfd, 0x60, 0x14, 0x2e,
	0x88, 0xfc, 0x1b, 0xf9, 0x13, 0x28, 0x7e, 0xcf, 0x3c, 0xac, 0x48, 0x3b, 0x05, 0x3b, 0x46, 0x76,
	0xa5, 0x45, 0xda, 0xed, 0x98, 0xb1, 0xc4, 0xe3, 0x61, 0xea, 0x00, 0xd2, 0x6b, 0x47, 0xaf, 0x6f,
	0xc2, 0x94, 0xfe, 0xb9, 0x06, 0x50, 0x00, 0xeb, 0x3e, 0x25, 0x98, 0x7a, 0x2f, 0x93, 0x77, 0x05,
	0x3d, 0xda, 0x56, 0x72, 0x13, 0x62, 0x9a, 0x22, 0xae, 0x9b, 0x51, 0xe6, 0xa2, 0xc9, 0x74, 0xd7,
	0x48, 0x33, 0x94, 0x17, 0xd0, 0xc7, 0xf7, 0x6e, 0x20, 0xa3, 0x7c, 0xa3, 0xa9, 0xf0, 0xbd, 0x4c,
	0x9e, 0x6d, 0x3d, 0x80, 0xed, 0x88, 0xa7, 0x8a, 0x09, 0xa7, 0x89, 0x8e, 0xd9, 0x95, 0xa6, 0xfc,
	0x45, 0x11, 0x41, 0x99, 0xf2, 0x95, 0x60, 0x6b, 0x4b, 0xc1, 0x9e, 0xff, 0xad, 0x07, 0x70, 0x11,
	0xf3, 0x37, 0x2c, 0xb9, 0xe7, 0x01, 0x23, 0x7f, 0xa9, 0xc1, 0xd1, 0xa6, 0xc7, 0x15, 0x79, 0x69,
	0xd3, 0xfb, 0x11, 0x2f, 0xb0, 0xc1, 0x27, 0x79, 0xf9, 0x2f, 0x6e, 0xa4, 0x67, 0x7f, 0xf8, 0xd7,
	0x7f, 0xfe, 0x54, 0x7f, 0x41, 0x9f, 0x9c, 0xdd, 0xff, 0x08, 0x5f, 0xff, 0x9b, 0xf0, 0xbe, 0xa9,
	0xbd, 0x24, 0xbf, 0xaf, 0xc1, 0x60, 0xf5, 0x1e, 0xa4, 0xc2, 0x61, 0x76, 0xeb, 0x52, 0xdc, 0xfa,
	0x89, 0x3f, 0xc9, 0x7e, 0x29, 0x0c, 0x3e, 0x5b, 0xeb, 0x03, 0x1e, 0xa4, 0x2f, 0xd1, 0x91, 0x27,
	0x84, 0x6e, 0x76, 0x04, 0x8d, 0xfc, 0x06, 0x7a, 0xd7, 0xcc, 0x14, 0xe4, 0xe5, 0x1c, 0x4b, 0xf2,
	0xb0, 0x3c, 0x69, 0x4b, 0x2f, 0x93, 0xc1, 0xca, 0x11, 0x4c, 0x1f, 0xa3, 0xb1, 0x43, 0x4a, 0x32,
	0x63, 0x58, 0xf2, 0x67, 0xba, 0xe4, 0x75, 0x8c, 0xbf, 0x86, 0xbe, 0xc6, 0xaf, 0x14, 0xfd, 0xda,
	0xc0, 0xfa, 0x8b, 0xa6, 0xe9, 0x67, 0x88, 0xee, 0x90, 0x83, 0x2a, 0xba, 0x6e, 0x22, 0x08, 0xf5,
	0x2b, 0xd8, 0xbd, 0x66, 0xea, 0x3b, 0x7f, 0x66, 0xcb, 0x73, 0x2d, 0x34, 0xa9, 0x40, 0x9b, 0x87,
	0xc7, 0x31, 0x82, 0x7f, 0x42, 0x0e, 0xab, 0xe0, 0x93, 0x1c, 0xed, 0x1e, 0xf6, 0xcb, 0xce, 0x5f,
	0xce, 0xb3, 0x26, 0xb0, 0x0c, 0xb6, 0x39, 0x49, 0x5f, 0xa1, 0xa5, 0xe7, 0x94, 0x56, 0x2d, 0xad,
	0x02, 0xd7, 0x49, 0x53, 0xf0, 0x20, 0xbb, 0x94, 0xf4, 0x63, 0x8c, 0x3a, 0x65, 0x55, 0xf9, 0x19,
	0x95, 0x51, 0x81, 0x1e, 0x2f, 0x1b, 0xae, 0xa0, 0x6b, 0xab, 0x3f, 0x07, 0xb8, 0x66, 0xca, 0x8e,
	0x75, 0xd2, 0xb3, 0x98, 0xf6, 0x17, 0x4a, 0x9e, 0xc0, 0xd2, 0xd8, 0xcf, 0x12, 0x48, 0xf7, 0x33,
	0x74, 0xdf, 0x28, 0xcf, 0xb8, 0x18, 0x49, 0x0d, 0x19, 0x22, 0xbb, 0x4a, 0x93, 0x6b, 0x09, 0x76,
	0x60, 0xd7, 0x2b, 0xa6, 0x1b, 0x7d, 0x86, 0xf0, 0x27, 0xf4, 0xd3, 0x45, 0xf8, 0xd2, 0x7c, 0xd3,
	0x56, 0x82, 0x22, 0x5d, 0xc5, 0x90, 0x5b, 0xcb, 0x84, 0x47, 0xe5, 0x64, 0xe5, 0xfb, 0xd7, 0x30,
	0xad, 0xc0, 0x1b, 0x62, 0x28, 0xa5, 0x8e, 0xb4, 0xde, 0xc2, 0x20, 0x4f, 0xd5, 0x52, 0xfb, 0xa2,
	0x9f, 0xa2, 0x99, 0x47, 0xe4, 0x61, 0x11, 0x53, 0x81, 0xf8, 0x0b, 0xe8, 0x5e, 0x33, 0x55, 0x6a,
	0xc6, 0x6b, 0x4d, 0x2c, 0x4f, 0x04, 0x3a, 0x40, 0xe4, 0x7d, 0x92, 0x17, 0x62, 0x69, 0x42, 0xfc,
	0x00, 0xad, 0x6c, 0x7a, 0xae, 0xc7, 0x2c, 0x14, 0xd5, 0x39, 0x4b, 0x1d, 0x44, 0x26, 0xa4, 0x9f,
	0x23, 0x67, 0x58, 0x7f, 0xac, 0xc1, 0xf1, 0x35, 0x53, 0xa5, 0xae, 0x72, 0x39, 0x5f, 0xf8, 0x7b,
	0x83, 0x3c, 0xce, 0x6e, 0x78, 0xe5, 0xdf, 0x1e, 0x79, 0x43, 0x5d, 0xfe, 0x3f, 0x83, 0x9e, 0xa3,
	0xdd, 0x2f, 0xe9, 0xf3, 0xcc, 0xee, 0x78, 0xb3, 0x29, 0xcd, 0x85, 0x04, 0x4b, 0xb6, 0xb2, 0xcb,
	0xbc, 0x91, 0x97, 0xcd, 0x68, 0xf9, 0x26, 0xf3, 0xcf, 0xd1, 0xfc, 0xe7, 0xf4, 0x68, 0x9d, 0xf9,
	0x6f, 0x6d, 0x8f, 0xbb, 0xc5, 0xc2, 0xb9, 0xb4, 0xef, 0xda, 0x45, 0x86, 0x67, 0x96, 0xad, 0x3e,
	0xcf, 0xaa, 0xbd, 0x2f, 0xba, 0x97, 0x13, 0xce, 0x6c, 0x30, 0x75, 0xf3, 0xe8, 0x0d, 0x13, 0xe1,
	0x1b, 0x3e, 0x16, 0x2c, 0xac, 0xfc, 0x14, 0x5f, 0x76, 0x77, 0xf0, 0x30, 0x33, 0x20, 0x65, 0x94,
	0xa3, 0x53, 0x44, 0x3f, 0xa2, 0x79, 0x6f, 0x53, 0xb3, 0xb3, 0xb4, 0x80, 0xd4, 0x75, 0x33, 0xdc,
	0xc6, 0x51, 0xfc, 0xf5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x56, 0x50, 0xd5, 0xd3, 0x12,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiServiceClient interface {
	// get pending transactions by page
	GetPendingTransactionsByPage(ctx context.Context, in *GetPendingTransactionsByPageRequest, opts ...grpc.CallOption) (*PendingTransaction, error)
	// get pending transactions size
	GetPendingTransactionsSize(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*PendingTransactionsSize, error)
	// get block by hash
	GetBlockByHash(ctx context.Context, in *BlockHashAndFull, opts ...grpc.CallOption) (*BlockResponse, error)
	// get best block hash
	GetBestBlockHash(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockHash, error)
	// get max block height
	GetMaxHeight(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockHeight, error)
	// get best block by height
	GetBestBlockByHeight(ctx context.Context, in *BlockHeightAndFull, opts ...grpc.CallOption) (*BlockResponse, error)
	// get best block by height
	GetBlocksByHeight(ctx context.Context, in *BlockHeightAndFull, opts ...grpc.CallOption) (*BlockListResponse, error)
	// get account info by address
	GetAccount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountInfo, error)
	// get creditIndex by address
	GetCreditIndex(ctx context.Context, in *Address, opts ...grpc.CallOption) (*CreditIndexResponse, error)
	// Return the block chain info
	GetBlockChainInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockChainInfo, error)
	// Return active count of the node
	GetActiveCount(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*ActiveCountResponse, error)
	// Return net version
	GetNetVersion(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NetVersion, error)
	// Return the p2p node info.
	NodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	//return transaction
	GetTransactionByContractAddress(ctx context.Context, in *ContractAddressRequest, opts ...grpc.CallOption) (*TransactionReceipt, error)
	//return transaction
	GetTransactionByHash(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*TransactionReceipt, error)
	//return balance
	GetBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BalanceResponse, error)
	//send sign tx
	SendSignedTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BoolResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetPendingTransactionsByPage(ctx context.Context, in *GetPendingTransactionsByPageRequest, opts ...grpc.CallOption) (*PendingTransaction, error) {
	out := new(PendingTransaction)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetPendingTransactionsByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPendingTransactionsSize(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*PendingTransactionsSize, error) {
	out := new(PendingTransactionsSize)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetPendingTransactionsSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByHash(ctx context.Context, in *BlockHashAndFull, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBestBlockHash(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockHash, error) {
	out := new(BlockHash)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetBestBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMaxHeight(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetMaxHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBestBlockByHeight(ctx context.Context, in *BlockHeightAndFull, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetBestBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlocksByHeight(ctx context.Context, in *BlockHeightAndFull, opts ...grpc.CallOption) (*BlockListResponse, error) {
	out := new(BlockListResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetBlocksByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCreditIndex(ctx context.Context, in *Address, opts ...grpc.CallOption) (*CreditIndexResponse, error) {
	out := new(CreditIndexResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetCreditIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockChainInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockChainInfo, error) {
	out := new(BlockChainInfo)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetBlockChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetActiveCount(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*ActiveCountResponse, error) {
	out := new(ActiveCountResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetActiveCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNetVersion(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NetVersion, error) {
	out := new(NetVersion)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetNetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) NodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/NodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionByContractAddress(ctx context.Context, in *ContractAddressRequest, opts ...grpc.CallOption) (*TransactionReceipt, error) {
	out := new(TransactionReceipt)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionByContractAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionByHash(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*TransactionReceipt, error) {
	out := new(TransactionReceipt)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendSignedTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.ApiService/SendSignedTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
type ApiServiceServer interface {
	// get pending transactions by page
	GetPendingTransactionsByPage(context.Context, *GetPendingTransactionsByPageRequest) (*PendingTransaction, error)
	// get pending transactions size
	GetPendingTransactionsSize(context.Context, *NonParamsRequest) (*PendingTransactionsSize, error)
	// get block by hash
	GetBlockByHash(context.Context, *BlockHashAndFull) (*BlockResponse, error)
	// get best block hash
	GetBestBlockHash(context.Context, *NonParamsRequest) (*BlockHash, error)
	// get max block height
	GetMaxHeight(context.Context, *NonParamsRequest) (*BlockHeight, error)
	// get best block by height
	GetBestBlockByHeight(context.Context, *BlockHeightAndFull) (*BlockResponse, error)
	// get best block by height
	GetBlocksByHeight(context.Context, *BlockHeightAndFull) (*BlockListResponse, error)
	// get account info by address
	GetAccount(context.Context, *Address) (*AccountInfo, error)
	// get creditIndex by address
	GetCreditIndex(context.Context, *Address) (*CreditIndexResponse, error)
	// Return the block chain info
	GetBlockChainInfo(context.Context, *NonParamsRequest) (*BlockChainInfo, error)
	// Return active count of the node
	GetActiveCount(context.Context, *NonParamsRequest) (*ActiveCountResponse, error)
	// Return net version
	GetNetVersion(context.Context, *NonParamsRequest) (*NetVersion, error)
	// Return the p2p node info.
	NodeInfo(context.Context, *NonParamsRequest) (*NodeInfoResponse, error)
	//return transaction
	GetTransactionByContractAddress(context.Context, *ContractAddressRequest) (*TransactionReceipt, error)
	//return transaction
	GetTransactionByHash(context.Context, *TransactionHash) (*TransactionReceipt, error)
	//return balance
	GetBalance(context.Context, *Address) (*BalanceResponse, error)
	//send sign tx
	SendSignedTransaction(context.Context, *Transaction) (*BoolResponse, error)
}

// UnimplementedApiServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (*UnimplementedApiServiceServer) GetPendingTransactionsByPage(ctx context.Context, req *GetPendingTransactionsByPageRequest) (*PendingTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactionsByPage not implemented")
}
func (*UnimplementedApiServiceServer) GetPendingTransactionsSize(ctx context.Context, req *NonParamsRequest) (*PendingTransactionsSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactionsSize not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockByHash(ctx context.Context, req *BlockHashAndFull) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (*UnimplementedApiServiceServer) GetBestBlockHash(ctx context.Context, req *NonParamsRequest) (*BlockHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestBlockHash not implemented")
}
func (*UnimplementedApiServiceServer) GetMaxHeight(ctx context.Context, req *NonParamsRequest) (*BlockHeight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxHeight not implemented")
}
func (*UnimplementedApiServiceServer) GetBestBlockByHeight(ctx context.Context, req *BlockHeightAndFull) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestBlockByHeight not implemented")
}
func (*UnimplementedApiServiceServer) GetBlocksByHeight(ctx context.Context, req *BlockHeightAndFull) (*BlockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksByHeight not implemented")
}
func (*UnimplementedApiServiceServer) GetAccount(ctx context.Context, req *Address) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedApiServiceServer) GetCreditIndex(ctx context.Context, req *Address) (*CreditIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditIndex not implemented")
}
func (*UnimplementedApiServiceServer) GetBlockChainInfo(ctx context.Context, req *NonParamsRequest) (*BlockChainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockChainInfo not implemented")
}
func (*UnimplementedApiServiceServer) GetActiveCount(ctx context.Context, req *NonParamsRequest) (*ActiveCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveCount not implemented")
}
func (*UnimplementedApiServiceServer) GetNetVersion(ctx context.Context, req *NonParamsRequest) (*NetVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetVersion not implemented")
}
func (*UnimplementedApiServiceServer) NodeInfo(ctx context.Context, req *NonParamsRequest) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (*UnimplementedApiServiceServer) GetTransactionByContractAddress(ctx context.Context, req *ContractAddressRequest) (*TransactionReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByContractAddress not implemented")
}
func (*UnimplementedApiServiceServer) GetTransactionByHash(ctx context.Context, req *TransactionHash) (*TransactionReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (*UnimplementedApiServiceServer) GetBalance(ctx context.Context, req *Address) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedApiServiceServer) SendSignedTransaction(ctx context.Context, req *Transaction) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedTransaction not implemented")
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetPendingTransactionsByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingTransactionsByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPendingTransactionsByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetPendingTransactionsByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPendingTransactionsByPage(ctx, req.(*GetPendingTransactionsByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPendingTransactionsSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPendingTransactionsSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetPendingTransactionsSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPendingTransactionsSize(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashAndFull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, req.(*BlockHashAndFull))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBestBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBestBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBestBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBestBlockHash(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMaxHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMaxHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetMaxHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMaxHeight(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBestBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightAndFull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBestBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBestBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBestBlockByHeight(ctx, req.(*BlockHeightAndFull))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlocksByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeightAndFull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlocksByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlocksByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlocksByHeight(ctx, req.(*BlockHeightAndFull))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccount(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCreditIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCreditIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetCreditIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCreditIndex(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlockChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockChainInfo(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetActiveCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetActiveCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetActiveCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetActiveCount(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetNetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNetVersion(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).NodeInfo(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionByContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionByContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionByContractAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionByContractAddress(ctx, req.(*ContractAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionByHash(ctx, req.(*TransactionHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBalance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendSignedTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendSignedTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingTransactionsByPage",
			Handler:    _ApiService_GetPendingTransactionsByPage_Handler,
		},
		{
			MethodName: "GetPendingTransactionsSize",
			Handler:    _ApiService_GetPendingTransactionsSize_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _ApiService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBestBlockHash",
			Handler:    _ApiService_GetBestBlockHash_Handler,
		},
		{
			MethodName: "GetMaxHeight",
			Handler:    _ApiService_GetMaxHeight_Handler,
		},
		{
			MethodName: "GetBestBlockByHeight",
			Handler:    _ApiService_GetBestBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlocksByHeight",
			Handler:    _ApiService_GetBlocksByHeight_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ApiService_GetAccount_Handler,
		},
		{
			MethodName: "GetCreditIndex",
			Handler:    _ApiService_GetCreditIndex_Handler,
		},
		{
			MethodName: "GetBlockChainInfo",
			Handler:    _ApiService_GetBlockChainInfo_Handler,
		},
		{
			MethodName: "GetActiveCount",
			Handler:    _ApiService_GetActiveCount_Handler,
		},
		{
			MethodName: "GetNetVersion",
			Handler:    _ApiService_GetNetVersion_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _ApiService_NodeInfo_Handler,
		},
		{
			MethodName: "GetTransactionByContractAddress",
			Handler:    _ApiService_GetTransactionByContractAddress_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _ApiService_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _ApiService_GetBalance_Handler,
		},
		{
			MethodName: "SendSignedTransaction",
			Handler:    _ApiService_SendSignedTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_api.proto",
}
